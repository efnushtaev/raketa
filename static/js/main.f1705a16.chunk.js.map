{"version":3,"sources":["data-list/data-item.js","data-list/data-list.js","app.js","app-container.js","serviceWorker.js","index.js"],"names":["StyledWrapper","styled","div","DataItem","itemData","username","name","body","className","DataList","props","dataList","filterValue","filter","e","toLowerCase","indexOf","map","App","isLoading","onFilterChange","restProps","for","id","onChange","defaultValue","AppContainer","useState","setDataList","setFilter","setLoading","useEffect","a","axios","get","resPosts","resUsers","result","data","item","userId","push","dataFetching","preventDefault","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4hBAGA,IAAMA,EAAgBC,IAAOC,IAAV,KA0BJC,EAXE,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACVC,EAAwBD,EAAxBC,SAAUC,EAAcF,EAAdE,KAAMC,EAAQH,EAARG,KAEvB,OAAO,kBAACP,EAAD,KACL,0BAAMQ,UAAW,QAASF,GAC1B,0BAAME,UAAW,YAAY,2BAAIH,IACjC,uBAAGG,UAAW,QAASD,GACvB,+BCRWE,EAdE,SAACC,GAAW,IAAD,EACeA,EAAlCA,MAAQC,EADW,EACXA,SAAUC,EADC,EACDA,YACzB,OAAO,6BACJD,EACEE,QAAO,SAAAC,GACN,OAAQA,EAAEP,KAAKQ,cAAcC,QAAQJ,IAAgB,KAEtDK,KAAI,SAAAH,GACH,OAAO,kBAAC,EAAD,CAAUV,SAAUU,S,6SCPnC,IAAMd,EAAgBC,IAAOC,IAAV,KA2BJgB,EAZH,SAACR,GAAW,IACfS,EAA2CT,EAA3CS,UAAWC,EAAgCV,EAAhCU,eAAmBC,EADhB,YAC6BX,EAD7B,gCAErB,OAAO,kBAAC,EAAD,KACL,yBAAKF,UAAW,UACd,2BAAOc,IAAK,UAAU,gEACtB,2BAAOC,GAAG,SAASjB,KAAK,SAASkB,SAAUJ,EAAgBK,aAAc,MAE1EN,GAAa,yBAAKX,UAAU,WAAU,6CACvC,kBAAC,EAAD,CAAUE,MAAOW,MCkBNK,EAzCM,WAAO,IAAD,EACOC,mBAAS,IADhB,mBAClBhB,EADkB,KACRiB,EADQ,OAEQD,mBAAS,IAFjB,mBAElBf,EAFkB,KAELiB,EAFK,OAGOF,oBAAS,GAHhB,mBAGlBR,EAHkB,KAGPW,EAHO,KAiCzB,OAvBAC,qBAAU,YACU,uCAAG,gCAAAC,EAAA,6DACnBF,GAAW,GADQ,SAEIG,IAAMC,IAAI,8CAFd,cAEbC,EAFa,gBAGIF,IAAMC,IAAI,8CAHd,OAGbE,EAHa,OAIfC,EAAS,GACbF,EAASG,KAAKrB,KAAI,SAAAsB,GAChB,IAAIC,EAASD,EAAI,OACjBF,EAAOI,KACL,CACE,GAAMF,EAAI,OACV,KAAQH,EAASE,KAAKE,EAAO,GAAGlC,KAChC,SAAY8B,EAASE,KAAKE,EAAO,GAAGnC,SACpC,KAAQkC,EAAKhC,UAInBqB,EAAYS,GACZP,GAAW,GAjBQ,4CAAH,qDAmBlBY,KACC,IAEI,kBAAC,EAAD,CACL/B,SAAUA,EACVC,YAAaA,EACbO,UAAWA,EACXC,eAhCyB,SAACN,GAC1BA,EAAE6B,iBACFd,EAAUf,EAAE8B,OAAOC,WCCHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f1705a16.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledWrapper = styled.div`\r\n  padding-top: 10px;\r\n  padding-bottom: 10px;\r\n  &>.name{\r\n    font-size: 1.2em;\r\n    color: grey;\r\n    margin-left:10px;\r\n    margin-right:10px\r\n  }\r\n  &>.username{\r\n    font-size: 1.1em;\r\n    color: grey;\r\n  }\r\n`\r\n\r\nconst DataItem = ({itemData}) => {\r\n  const {username, name, body} = itemData;\r\n\r\n  return <StyledWrapper>\r\n    <span className={'name'}>{name}</span>\r\n    <span className={'username'}><b>{username}</b></span>\r\n    <p className={'body'}>{body}</p>\r\n    <hr/>\r\n  </StyledWrapper>\r\n};\r\n\r\nexport default DataItem;\r\n","import React from 'react';\r\nimport DataItem from './data-item';\r\n\r\nconst DataList = (props) => {\r\n  const {props: {dataList, filterValue}} = props;\r\n  return <div>\r\n    {dataList\r\n      .filter(e => {\r\n        return (e.body.toLowerCase().indexOf(filterValue) >= 0)\r\n      })\r\n      .map(e => {\r\n        return <DataItem itemData={e} />\r\n      })\r\n    }\r\n  </div>\r\n};\r\n\r\nexport default DataList;\r\n","import React from 'react';\nimport DataList from './data-list/data-list';\nimport styled from 'styled-components';\n\nconst StyledWrapper = styled.div`\n  padding-top: 10px;\n  max-width: 1200px;\n  margin-left: auto;\n  margin-right: auto;\n  &>.search {\n    padding-top: 20px;\n    padding-bottom: 20px\n  }\n  &>.loading {\n    padding-top: 20px;\n    padding-bottom: 20px\n  }\n`\n\nconst App = (props) => {\n  const {isLoading, onFilterChange, ...restProps} = props\n  return <StyledWrapper>\n    <div className={\"search\"}>\n      <label for={\"search\"}><b>Найти: </b></label>\n      <input id=\"search\" name=\"search\" onChange={onFilterChange} defaultValue={''} />\n    </div>\n    {isLoading && <div className=\"loading\"><i>...Loading...</i></div>}\n    <DataList props={restProps} />\n  </StyledWrapper>\n};\n\nexport default App;\n","import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport App from './app';\r\n\r\nconst AppContainer = () => {\r\n  const [dataList, setDataList] = useState([]);\r\n  const [filterValue, setFilter] = useState('');\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  const handleFilterChange = (e) => {\r\n    e.preventDefault();\r\n    setFilter(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const dataFetching = async () => {\r\n      setLoading(true);\r\n      const resPosts = await axios.get('https://jsonplaceholder.typicode.com/posts');\r\n      const resUsers = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n      let result = [];\r\n      resPosts.data.map(item => {\r\n        let userId = item['userId'];\r\n        result.push(\r\n          {\r\n            'id': item['userId'],\r\n            \"name\": resUsers.data[userId-1].name,\r\n            \"username\": resUsers.data[userId-1].username,\r\n            \"body\": item.body\r\n          }\r\n        )\r\n      })\r\n      setDataList(result)\r\n      setLoading(false);\r\n    }\r\n    dataFetching()\r\n  }, []);\r\n\r\n  return <App \r\n    dataList={dataList}\r\n    filterValue={filterValue}\r\n    isLoading={isLoading}\r\n    onFilterChange={handleFilterChange}\r\n  />\r\n};\r\n\r\nexport default AppContainer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppContainer from './app-container';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}